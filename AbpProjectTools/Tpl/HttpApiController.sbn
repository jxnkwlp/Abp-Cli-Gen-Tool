using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Volo.Abp;
using Volo.Abp.Content;
using Volo.Abp.Application.Dtos;
{{~for item in namespaces~}}
using {{item}};
{{~end~}}

namespace {{app_service.namespace}};

[Area({{project_name}}RemoteServiceConsts.RemoteServiceName)]
[RemoteService(Name = {{project_name}}RemoteServiceConsts.RemoteServiceName)]
[Route("api/{{app_service.name | to_slug_string | to_pluralize }}")]
public class {{app_service.name}}Controller : {{base_controller}}, I{{app_service.name}}AppService
{
    protected I{{app_service.name}}AppService Service {get;}

    public {{app_service.name}}Controller(I{{app_service.name}}AppService service)
    {
        Service = service;
    }

{{~for item in app_service.methods~}}
{{~if !item.is_inherited~}}
    /// <inheritdoc/>
    [{{routes[item.name].method}}({{routes[item.name].url ? "\""+routes[item.name].url+"\"" : "" }})]
    public virtual {{item.type}} {{~item.type_arguments.size>0?"<":"" ~}}
{{-for p in item.type_arguments-}}
            {{p.name}}{{for.last ? "":","}}
{{-end-}}
{{- item.type_arguments.size > 0 ? "> ":" " -}}
        {{-item.name}}(
    {{-for p in item.params-}}
            {{p.type}} {{p.name}}{{for.last?"":", "}}
    {{-end-}}
    )
    {
        return Service.{{item.name}}(
            {{-for p in item.params-}}
                {{p.name}}{{for.last?"":", "}}
            {{-end-}}
        );
    }

{{~end~}}
{{~end~}}
}
