using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;
using {{domain.type_namespace}};

namespace {{info.type_namespace}}.Repositories;

public class {{domain.type_name}}Repository : EfCoreRepository<{{info.type_name}}, {{domain.type_name}}, {{domain.type_key}}>, I{{domain.type_name}}Repository
{
    public {{domain.type_name}}Repository(IDbContextProvider<{{info.type_name}}> dbContextProvider) : base(dbContextProvider)
    {
    }

    public virtual async Task<long> GetCountAsync(string? filter = null, CancellationToken cancellationToken = default)
    {
        var dbset = await GetDbSetAsync();

        return await dbset
            // TODO
            //.WhereIf(!string.IsNullOrEmpty(filter), x => x.Name.Contains(filter))
            .LongCountAsync(cancellationToken);
    }

    public virtual async Task<List<{{domain.type_name}}>> GetListAsync(string? filter = null, bool includeDetails = false, CancellationToken cancellationToken = default)
    {
        var dbset = await GetDbSetAsync();

        return await dbset
            // TODO
            //.IncludeIf(includeDetails, TODO )
            //.WhereIf(!string.IsNullOrEmpty(filter), x => x.Name.Contains(filter))
            .ToListAsync(cancellationToken);
    }

    public virtual async Task<List<{{domain.type_name}}>> GetPagedListAsync(int skipCount, int maxResultCount, string? filter = null, string? sorting = null, bool includeDetails = false, CancellationToken cancellationToken = default)
    {
        var dbset = await GetDbSetAsync();

        return await dbset
            // TODO
            //.IncludeIf(includeDetails, TODO )
            //.WhereIf(!string.IsNullOrEmpty(filter), x => x.Name.Contains(filter))
            .OrderBy(sorting ?? nameof({{domain.type_name}}.CreationTime) + " desc")
            .PageBy(skipCount, maxResultCount)
            .ToListAsync(cancellationToken);
    } 
}
