using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading;
using System.Threading.Tasks;
using MongoDB.Driver;
using MongoDB.Driver.Linq;
using Volo.Abp.Domain.Repositories.MongoDB;
using Volo.Abp.Domain.Entities;
using Volo.Abp.MongoDB;
using {{type.namespace}};
using {{db_context_type.namespace}};

namespace {{slu_name}}.MongoDB.Repositories;

public class {{type.name}}Repository : MongoDbRepository<{{db_context_type.name}}, {{type.name}}, {{type.key}}>, I{{type.name}}Repository
{
    public {{type.name}}Repository(IMongoDbContextProvider<{{db_context_type.name}}> dbContextProvider) : base(dbContextProvider)
    {
    }

    // public virtual async Task<{{type.name}}?> FindByNameAsync(string name, CancellationToken cancellationToken = default)
    // {
    //     var query = await GetMongoQueryableAsync();
    //
    //     return await query.FirstOrDefaultAsync(x => x.Name == name, cancellationToken: cancellationToken);
    // }

    // public virtual async Task<{{type.name}}> GetByNameAsync(string name, CancellationToken cancellationToken = default)
    // {
    //     var query = await GetMongoQueryableAsync();
    //
    //     var entity = await query.FirstOrDefaultAsync(x => x.Name == name, cancellationToken: cancellationToken);
    //
    //     return entity ?? throw new EntityNotFoundException(typeof({{type.name}}));
    // }


    // public virtual async Task<bool> IsNameExistsAsync(string name, Guid[] excludeIds = null, CancellationToken cancellationToken = default)
    // {
    //     var query = await GetMongoQueryableAsync();
    //
    //     return await query
    //         .WhereIf(excludeIds?.Any() == true, x => !excludeIds.Contains(x.Id))
    //         .As<IMongoQueryable<{{type.name}}>>()
    //         .AnyAsync(x => x.Name == name, cancellationToken: cancellationToken);
    // }

    public virtual async Task<long> GetCountAsync(string? filter = null, CancellationToken cancellationToken = default)
    {
        var query = await GetMongoQueryableAsync();

        return await query
            // TODO
            //.WhereIf(!string.IsNullOrEmpty(filter), x => x.Name.Contains(filter))
            .As<IMongoQueryable<{{type.name}}>>()
            .LongCountAsync(cancellationToken);
    }

    public virtual async Task<List<{{type.name}}>> GetListAsync(string? filter = null, bool includeDetails = false, CancellationToken cancellationToken = default)
    {
        var query = await GetMongoQueryableAsync();

        return await query
            // TODO
            //.IncludeIf(includeDetails, TODO )
            //.WhereIf(!string.IsNullOrEmpty(filter), x => x.Name.Contains(filter))
            .As<IMongoQueryable<{{type.name}}>>()
            .ToListAsync(cancellationToken);
    }

    public virtual async Task<List<{{type.name}}>> GetPagedListAsync(int skipCount, int maxResultCount, string? filter = null, string? sorting = null, bool includeDetails = false, CancellationToken cancellationToken = default)
    {
        var query = await GetMongoQueryableAsync();

        return await query
            // TODO
            //.IncludeIf(includeDetails, TODO )
            //.WhereIf(!string.IsNullOrEmpty(filter), x => x.Name.Contains(filter))
            .OrderBy(sorting ?? nameof({{type.name}}.CreationTime) + " desc")
            .PageBy(skipCount, maxResultCount)
            .As<IMongoQueryable<{{type.name}}>>()
            .ToListAsync(cancellationToken);
    }
}
